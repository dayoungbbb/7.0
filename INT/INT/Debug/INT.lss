
INT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000210  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  000002ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007f6  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e7  00000000  00000000  00000b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000334  00000000  00000000  00001221  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011c  00000000  00000000  0000195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  9e:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_16>:
int sec1 = 0;
int sec2 = 0;
int sec3 = 0;

ISR(TIMER0_OVF_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	cnt++;
  b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt>
  b8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <cnt+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1
	if(cnt == 32){
  be:	80 32       	cpi	r24, 0x20	; 32
  c0:	91 05       	cpc	r25, r1
  c2:	29 f0       	breq	.+10     	; 0xce <__vector_16+0x28>
int sec2 = 0;
int sec3 = 0;

ISR(TIMER0_OVF_vect)
{
	cnt++;
  c4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <cnt+0x1>
  c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <cnt>
  cc:	3b c0       	rjmp	.+118    	; 0x144 <__vector_16+0x9e>
	if(cnt == 32){
		cnt = 0;
  ce:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <cnt+0x1>
  d2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt>
		if(sec1 == 9){
  d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sec1>
  da:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <sec1+0x1>
  de:	89 30       	cpi	r24, 0x09	; 9
  e0:	91 05       	cpc	r25, r1
  e2:	71 f4       	brne	.+28     	; 0x100 <__vector_16+0x5a>
			sec1 = 0;
  e4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sec1+0x1>
  e8:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sec1>
			sec2++;
  ec:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sec2>
  f0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sec2+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sec2+0x1>
  fa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sec2>
  fe:	05 c0       	rjmp	.+10     	; 0x10a <__vector_16+0x64>
		}
		else
			sec1++;
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <sec1+0x1>
 106:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sec1>
		if(sec2 == 6){
 10a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sec2>
 10e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sec2+0x1>
 112:	06 97       	sbiw	r24, 0x06	; 6
 114:	69 f4       	brne	.+26     	; 0x130 <__vector_16+0x8a>
			sec2 = 0;
 116:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <sec2+0x1>
 11a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <sec2>
			sec3++;
 11e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 122:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 12c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		}
		if(sec3 == 10)
 130:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 134:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 138:	0a 97       	sbiw	r24, 0x0a	; 10
 13a:	21 f4       	brne	.+8      	; 0x144 <__vector_16+0x9e>
			sec3 = 0;
 13c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__data_end+0x1>
 140:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <__data_end>
			
	}
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <main>:

int main(void)
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	2a 97       	sbiw	r28, 0x0a	; 10
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t numbers[] = {0xFC, 0x60, 0xDA, 0xF2, 0x66, 0xB6, 0xBE, 0xE4, 0xFE, 0xE6};
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	de 01       	movw	r26, r28
 16e:	11 96       	adiw	r26, 0x01	; 1
 170:	01 90       	ld	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	8a 95       	dec	r24
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x1e>

	DDRD = 0xFF;
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x07;
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	84 b9       	out	0x04, r24	; 4

	
	TCCR0B |= (1 << CS02) | (1 << CS00);
 180:	85 b5       	in	r24, 0x25	; 37
 182:	85 60       	ori	r24, 0x05	; 5
 184:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);
 186:	ee e6       	ldi	r30, 0x6E	; 110
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 83       	st	Z, r24
	sei();
 190:	78 94       	sei
	
	while(1)
	{
		PORTB = 0x03; //011	
 192:	33 e0       	ldi	r19, 0x03	; 3
		PORTD = numbers[sec1];
		_delay_ms(1);
		PORTB = 0x05; //101
 194:	25 e0       	ldi	r18, 0x05	; 5
		PORTD = numbers[sec2];
		_delay_ms(1);
		
		PORTB = 0x06; //110
 196:	96 e0       	ldi	r25, 0x06	; 6
	TIMSK0 |= (1 << TOIE0);
	sei();
	
	while(1)
	{
		PORTB = 0x03; //011	
 198:	35 b9       	out	0x05, r19	; 5
		PORTD = numbers[sec1];
 19a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <sec1>
 19e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <sec1+0x1>
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	4c 0f       	add	r20, r28
 1a8:	5d 1f       	adc	r21, r29
 1aa:	e4 0f       	add	r30, r20
 1ac:	f5 1f       	adc	r31, r21
 1ae:	80 81       	ld	r24, Z
 1b0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	ef e9       	ldi	r30, 0x9F	; 159
 1b4:	ff e0       	ldi	r31, 0x0F	; 15
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x64>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x6a>
 1bc:	00 00       	nop
		_delay_ms(1);
		PORTB = 0x05; //101
 1be:	25 b9       	out	0x05, r18	; 5
		PORTD = numbers[sec2];
 1c0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <sec2>
 1c4:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <sec2+0x1>
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	4c 0f       	add	r20, r28
 1ce:	5d 1f       	adc	r21, r29
 1d0:	e4 0f       	add	r30, r20
 1d2:	f5 1f       	adc	r31, r21
 1d4:	80 81       	ld	r24, Z
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	ef e9       	ldi	r30, 0x9F	; 159
 1da:	ff e0       	ldi	r31, 0x0F	; 15
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x8a>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x90>
 1e2:	00 00       	nop
		_delay_ms(1);
		
		PORTB = 0x06; //110
 1e4:	95 b9       	out	0x05, r25	; 5
		PORTD = numbers[sec3];
 1e6:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 1ea:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	50 e0       	ldi	r21, 0x00	; 0
 1f2:	4c 0f       	add	r20, r28
 1f4:	5d 1f       	adc	r21, r29
 1f6:	e4 0f       	add	r30, r20
 1f8:	f5 1f       	adc	r31, r21
 1fa:	80 81       	ld	r24, Z
 1fc:	8b b9       	out	0x0b, r24	; 11
 1fe:	ef e9       	ldi	r30, 0x9F	; 159
 200:	ff e0       	ldi	r31, 0x0F	; 15
 202:	31 97       	sbiw	r30, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <main+0xb0>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0xb6>
 208:	00 00       	nop
 20a:	c6 cf       	rjmp	.-116    	; 0x198 <main+0x46>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
