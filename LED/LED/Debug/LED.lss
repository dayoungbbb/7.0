
LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a27  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e6  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000556  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043a  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000516  00000000  00000000  00001f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  78:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <INIT_PORT>:
#include <util/delay.h>
#include "UART.h"

void INIT_PORT(void)
{
	DDRB = 0x20;
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
  84:	15 b8       	out	0x05, r1	; 5
	
	DDRD = 0x00;
  86:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x04;
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	8b b9       	out	0x0b, r24	; 11
  8c:	08 95       	ret

0000008e <main>:
}
#define loop_until_bit_is_set(sfr, bit) do{}while(bit_is_clear(sfr, bit)) //스핀락
#define loop_until_bit_is_clear(sfr, bit) do{}while(bit_is_set(sfr, bit))
int main(void)
{
	UART_INIT();
  8e:	0e 94 68 00 	call	0xd0	; 0xd0 <UART_INIT>
	INIT_PORT();
  92:	0e 94 40 00 	call	0x80	; 0x80 <INIT_PORT>
			_delay_ms(100); 
		loop_until_bit_is_clear(PIND, 2); //버튼이 눌린 상태
			if(state == 0) UART_transmit('*'); //UART-모니터
			//UART_transmit('*');
			state = 1;
			PORTB = 0x20;
  96:	c0 e2       	ldi	r28, 0x20	; 32
	int state = 0;
	
	/* Replace with your application code */
	while (1)
	{
		loop_until_bit_is_set(PIND, 2); //버튼이 눌리지 않은 상태
  98:	4a 9b       	sbis	0x09, 2	; 9
  9a:	fe cf       	rjmp	.-4      	; 0x98 <main+0xa>
			PORTB = 0x00;
  9c:	15 b8       	out	0x05, r1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	81 ee       	ldi	r24, 0xE1	; 225
  a2:	94 e0       	ldi	r25, 0x04	; 4
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x20>
  ae:	00 00       	nop
			state = 0;
			_delay_ms(100); 
		loop_until_bit_is_clear(PIND, 2); //버튼이 눌린 상태
  b0:	4a 99       	sbic	0x09, 2	; 9
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <main+0x22>
			if(state == 0) UART_transmit('*'); //UART-모니터
  b4:	8a e2       	ldi	r24, 0x2A	; 42
  b6:	0e 94 80 00 	call	0x100	; 0x100 <UART_transmit>
			//UART_transmit('*');
			state = 1;
			PORTB = 0x20;
  ba:	c5 b9       	out	0x05, r28	; 5
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	81 ee       	ldi	r24, 0xE1	; 225
  c0:	94 e0       	ldi	r25, 0x04	; 4
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3e>
  cc:	00 00       	nop
  ce:	e4 cf       	rjmp	.-56     	; 0x98 <main+0xa>

000000d0 <UART_INIT>:
unsigned char UART_receive(void)
{
	while( !(UCSR0A & (1<<RXC0)));
	return UDR0;
	
}
  d0:	e0 ec       	ldi	r30, 0xC0	; 192
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	80 83       	st	Z, r24
  da:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  e4:	e2 ec       	ldi	r30, 0xC2	; 194
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 60       	ori	r24, 0x06	; 6
  ec:	80 83       	st	Z, r24
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 61       	ori	r24, 0x10	; 16
  f6:	80 83       	st	Z, r24
  f8:	80 81       	ld	r24, Z
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <UART_transmit>:

void UART_transmit(unsigned char data)
{
	while( !(UCSR0A & (1<<UDRE0)) );
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <UART_transmit+0x4>
	UDR0 = data;
 10a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10e:	08 95       	ret

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
