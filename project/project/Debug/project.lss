
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800100  00800100  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c29  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000816  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000507  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000421  00000000  00000000  00001ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005dc  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 35       	cpi	r26, 0x52	; 82
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 19 01 	call	0x232	; 0x232 <main>
  88:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <enable>:
{
	col %= 16;
	row %= 2;
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	write_command(command);
  90:	5b 9a       	sbi	0x0b, 3	; 11
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	8a 95       	dec	r24
  96:	f1 f7       	brne	.-4      	; 0x94 <enable+0x4>
  98:	00 00       	nop
  9a:	5b 98       	cbi	0x0b, 3	; 11
  9c:	8f e9       	ldi	r24, 0x9F	; 159
  9e:	9f e0       	ldi	r25, 0x0F	; 15
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <enable+0x10>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <enable+0x16>
  a6:	00 00       	nop
  a8:	08 95       	ret

000000aa <write_data>:
  aa:	cf 93       	push	r28
  ac:	c8 2f       	mov	r28, r24
  ae:	5a 9a       	sbi	0x0b, 2	; 11
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	9c 2f       	mov	r25, r28
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	8f 70       	andi	r24, 0x0F	; 15
  b8:	89 2b       	or	r24, r25
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	0e 94 48 00 	call	0x90	; 0x90 <enable>
  c0:	2b b1       	in	r18, 0x0b	; 11
  c2:	30 e1       	ldi	r19, 0x10	; 16
  c4:	c3 9f       	mul	r28, r19
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	92 2f       	mov	r25, r18
  cc:	9f 70       	andi	r25, 0x0F	; 15
  ce:	89 2b       	or	r24, r25
  d0:	8b b9       	out	0x0b, r24	; 11
  d2:	0e 94 48 00 	call	0x90	; 0x90 <enable>
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <write_command>:
  da:	cf 93       	push	r28
  dc:	c8 2f       	mov	r28, r24
  de:	5a 98       	cbi	0x0b, 2	; 11
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	9c 2f       	mov	r25, r28
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	89 2b       	or	r24, r25
  ea:	8b b9       	out	0x0b, r24	; 11
  ec:	0e 94 48 00 	call	0x90	; 0x90 <enable>
  f0:	2b b1       	in	r18, 0x0b	; 11
  f2:	30 e1       	ldi	r19, 0x10	; 16
  f4:	c3 9f       	mul	r28, r19
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	92 2f       	mov	r25, r18
  fc:	9f 70       	andi	r25, 0x0F	; 15
  fe:	89 2b       	or	r24, r25
 100:	8b b9       	out	0x0b, r24	; 11
 102:	0e 94 48 00 	call	0x90	; 0x90 <enable>
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <clear>:
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
 110:	8f e9       	ldi	r24, 0x9F	; 159
 112:	9f e0       	ldi	r25, 0x0F	; 15
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <clear+0xa>
 118:	00 c0       	rjmp	.+0      	; 0x11a <clear+0x10>
 11a:	00 00       	nop
 11c:	08 95       	ret

0000011e <init>:
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	9c e9       	ldi	r25, 0x9C	; 156
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <init+0x4>
 126:	00 c0       	rjmp	.+0      	; 0x128 <init+0xa>
 128:	00 00       	nop
 12a:	8a b1       	in	r24, 0x0a	; 10
 12c:	8c 6f       	ori	r24, 0xFC	; 252
 12e:	8a b9       	out	0x0a, r24	; 10
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
 136:	88 e2       	ldi	r24, 0x28	; 40
 138:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
 13c:	8c e0       	ldi	r24, 0x0C	; 12
 13e:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
 142:	0e 94 85 00 	call	0x10a	; 0x10a <clear>
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
 14c:	08 95       	ret

0000014e <UART_INIT>:



void UART_INIT(void)
{
	UCSR0A |= _BV(U2X0);
 14e:	e0 ec       	ldi	r30, 0xC0	; 192
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	82 60       	ori	r24, 0x02	; 2
 156:	80 83       	st	Z, r24
	UBRR0H = 0x00;
 158:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 207;
 15c:	8f ec       	ldi	r24, 0xCF	; 207
 15e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0C |= 0x06;
 162:	e2 ec       	ldi	r30, 0xC2	; 194
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	86 60       	ori	r24, 0x06	; 6
 16a:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXEN0);
 16c:	e1 ec       	ldi	r30, 0xC1	; 193
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	80 61       	ori	r24, 0x10	; 16
 174:	80 83       	st	Z, r24
	UCSR0B |= _BV(TXEN0);
 176:	80 81       	ld	r24, Z
 178:	88 60       	ori	r24, 0x08	; 8
 17a:	80 83       	st	Z, r24
	UCSR0B |= _BV(RXCIE0);
 17c:	80 81       	ld	r24, Z
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	80 83       	st	Z, r24
 182:	08 95       	ret

00000184 <__vector_18>:
}
unsigned char buffer[80] = {0,};
unsigned char wr = 0;
unsigned char lcd_state =0;
ISR(USART_RX_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	while((UCSR0A & (1<<RXC0)))
 19c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1a0:	88 23       	and	r24, r24
 1a2:	94 f4       	brge	.+36     	; 0x1c8 <__vector_18+0x44>
		buffer[wr++] = UDR0;
 1a4:	c6 ec       	ldi	r28, 0xC6	; 198
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
unsigned char buffer[80] = {0,};
unsigned char wr = 0;
unsigned char lcd_state =0;
ISR(USART_RX_vect)
{
	while((UCSR0A & (1<<RXC0)))
 1a8:	a0 ec       	ldi	r26, 0xC0	; 192
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
		buffer[wr++] = UDR0;
 1ac:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <wr>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	8e 0f       	add	r24, r30
 1b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <wr>
 1b8:	88 81       	ld	r24, Y
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 5f       	subi	r30, 0xFE	; 254
 1be:	fe 4f       	sbci	r31, 0xFE	; 254
 1c0:	80 83       	st	Z, r24
unsigned char buffer[80] = {0,};
unsigned char wr = 0;
unsigned char lcd_state =0;
ISR(USART_RX_vect)
{
	while((UCSR0A & (1<<RXC0)))
 1c2:	8c 91       	ld	r24, X
 1c4:	88 23       	and	r24, r24
 1c6:	94 f3       	brlt	.-28     	; 0x1ac <__vector_18+0x28>
		buffer[wr++] = UDR0;
	buffer[wr] = '\0';
 1c8:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <wr>
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ee 5f       	subi	r30, 0xFE	; 254
 1d0:	fe 4f       	sbci	r31, 0xFE	; 254
 1d2:	10 82       	st	Z, r1
	
	lcd_state = 1;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	8f 91       	pop	r24
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <UART_transmit>:

void UART_transmit()
{
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
	if(!wr)
 1f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <wr>
 1fa:	88 23       	and	r24, r24
 1fc:	b9 f0       	breq	.+46     	; 0x22c <UART_transmit+0x3a>
		return;
	for(unsigned char i = 0; buffer[i]; i++){
 1fe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <buffer>
 202:	99 23       	and	r25, r25
 204:	89 f0       	breq	.+34     	; 0x228 <UART_transmit+0x36>
 206:	20 e0       	ldi	r18, 0x00	; 0
		while(!(UCSR0A & (1 << UDRE0)));
 208:	e0 ec       	ldi	r30, 0xC0	; 192
 20a:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = buffer[i];
 20c:	c6 ec       	ldi	r28, 0xC6	; 198
 20e:	d0 e0       	ldi	r29, 0x00	; 0
void UART_transmit()
{
	if(!wr)
		return;
	for(unsigned char i = 0; buffer[i]; i++){
		while(!(UCSR0A & (1 << UDRE0)));
 210:	80 81       	ld	r24, Z
 212:	85 ff       	sbrs	r24, 5
 214:	fd cf       	rjmp	.-6      	; 0x210 <UART_transmit+0x1e>
		UDR0 = buffer[i];
 216:	98 83       	st	Y, r25

void UART_transmit()
{
	if(!wr)
		return;
	for(unsigned char i = 0; buffer[i]; i++){
 218:	2f 5f       	subi	r18, 0xFF	; 255
 21a:	a2 2f       	mov	r26, r18
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	ae 5f       	subi	r26, 0xFE	; 254
 220:	be 4f       	sbci	r27, 0xFE	; 254
 222:	9c 91       	ld	r25, X
 224:	91 11       	cpse	r25, r1
 226:	f4 cf       	rjmp	.-24     	; 0x210 <UART_transmit+0x1e>
		while(!(UCSR0A & (1 << UDRE0)));
		UDR0 = buffer[i];
	}
	wr = 0;
 228:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <wr>
	//buffer[wr]= 0;
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <main>:

int main()
{
	//unsigned char data;
	unsigned char  i;
	UART_INIT();
 232:	0e 94 a7 00 	call	0x14e	; 0x14e <UART_INIT>
	init();
 236:	0e 94 8f 00 	call	0x11e	; 0x11e <init>
	sei();
 23a:	78 94       	sei
		{
			lcd_state = 0;
			clear();
			got_XY(0,0);
			for(i=0;i<16;i++){
				if(buffer[i] == 0)
 23c:	02 e0       	ldi	r16, 0x02	; 2
 23e:	11 e0       	ldi	r17, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 240:	2f ef       	ldi	r18, 0xFF	; 255
 242:	80 e7       	ldi	r24, 0x70	; 112
 244:	92 e0       	ldi	r25, 0x02	; 2
 246:	21 50       	subi	r18, 0x01	; 1
 248:	80 40       	sbci	r24, 0x00	; 0
 24a:	90 40       	sbci	r25, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <main+0x14>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <main+0x1e>
 250:	00 00       	nop
	init();
	sei();
	while(1){
		//data = UART_receive();
		_delay_ms(50);
		UART_transmit();	
 252:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <UART_transmit>
		if(lcd_state)
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25a:	88 23       	and	r24, r24
 25c:	89 f3       	breq	.-30     	; 0x240 <main+0xe>
		{
			lcd_state = 0;
 25e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			clear();
 262:	0e 94 85 00 	call	0x10a	; 0x10a <clear>
{
	col %= 16;
	row %= 2;
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	write_command(command);
 266:	80 e8       	ldi	r24, 0x80	; 128
 268:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
		{
			lcd_state = 0;
			clear();
			got_XY(0,0);
			for(i=0;i<16;i++){
				if(buffer[i] == 0)
 26c:	f8 01       	movw	r30, r16
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	2b c0       	rjmp	.+86     	; 0x2ca <main+0x98>
 274:	25 c0       	rjmp	.+74     	; 0x2c0 <main+0x8e>
 276:	f7 01       	movw	r30, r14
 278:	81 91       	ld	r24, Z+
 27a:	7f 01       	movw	r14, r30
 27c:	88 23       	and	r24, r24
 27e:	31 f0       	breq	.+12     	; 0x28c <main+0x5a>
					break;
				write_data(buffer[i]);
 280:	0e 94 55 00 	call	0xaa	; 0xaa <write_data>
		if(lcd_state)
		{
			lcd_state = 0;
			clear();
			got_XY(0,0);
			for(i=0;i<16;i++){
 284:	cf 5f       	subi	r28, 0xFF	; 255
 286:	c0 31       	cpi	r28, 0x10	; 16
 288:	b1 f7       	brne	.-20     	; 0x276 <main+0x44>
 28a:	29 c0       	rjmp	.+82     	; 0x2de <main+0xac>
{
	col %= 16;
	row %= 2;
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	write_command(command);
 28c:	80 ec       	ldi	r24, 0xC0	; 192
 28e:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
				if(buffer[i] == 0)
					break;
				write_data(buffer[i]);
			}
			got_XY(1,0);
			for(;i<32;i++){
 292:	c0 32       	cpi	r28, 0x20	; 32
 294:	a8 f6       	brcc	.-86     	; 0x240 <main+0xe>
				if(buffer[i] == 0)
 296:	ec 2f       	mov	r30, r28
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ee 5f       	subi	r30, 0xFE	; 254
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	80 81       	ld	r24, Z
 2a0:	81 11       	cpse	r24, r1
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <main+0x82>
 2a4:	cd cf       	rjmp	.-102    	; 0x240 <main+0xe>
 2a6:	ec 2f       	mov	r30, r28
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	ee 5f       	subi	r30, 0xFE	; 254
 2ac:	fe 4f       	sbci	r31, 0xFE	; 254
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	31 f2       	breq	.-116    	; 0x240 <main+0xe>
					break;
				write_data(buffer[i]);
 2b4:	0e 94 55 00 	call	0xaa	; 0xaa <write_data>
				if(buffer[i] == 0)
					break;
				write_data(buffer[i]);
			}
			got_XY(1,0);
			for(;i<32;i++){
 2b8:	cf 5f       	subi	r28, 0xFF	; 255
 2ba:	c0 32       	cpi	r28, 0x20	; 32
 2bc:	a0 f3       	brcs	.-24     	; 0x2a6 <main+0x74>
 2be:	c0 cf       	rjmp	.-128    	; 0x240 <main+0xe>
{
	col %= 16;
	row %= 2;
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	write_command(command);
 2c0:	80 ec       	ldi	r24, 0xC0	; 192
 2c2:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
		if(lcd_state)
		{
			lcd_state = 0;
			clear();
			got_XY(0,0);
			for(i=0;i<16;i++){
 2c6:	c0 e0       	ldi	r28, 0x00	; 0
 2c8:	e6 cf       	rjmp	.-52     	; 0x296 <main+0x64>
				if(buffer[i] == 0)
					break;
				write_data(buffer[i]);
 2ca:	0e 94 55 00 	call	0xaa	; 0xaa <write_data>
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f3 e0       	ldi	r31, 0x03	; 3
 2d2:	ef 2e       	mov	r14, r31
 2d4:	f1 e0       	ldi	r31, 0x01	; 1
 2d6:	ff 2e       	mov	r15, r31
 2d8:	f0 2d       	mov	r31, r0
		if(lcd_state)
		{
			lcd_state = 0;
			clear();
			got_XY(0,0);
			for(i=0;i<16;i++){
 2da:	c1 e0       	ldi	r28, 0x01	; 1
 2dc:	cc cf       	rjmp	.-104    	; 0x276 <main+0x44>
{
	col %= 16;
	row %= 2;
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;
	write_command(command);
 2de:	80 ec       	ldi	r24, 0xC0	; 192
 2e0:	0e 94 6d 00 	call	0xda	; 0xda <write_command>
 2e4:	d8 cf       	rjmp	.-80     	; 0x296 <main+0x64>

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
